from abc import abstractmethod, ABC, ABCMeta
from dataclasses import dataclass
from enum import Enum
from typing import Annotated, final, Final
from functools import lru_cache
from datetime import datetime, timedelta
from langchain_core.tools import tool
import time
import requests


@final
@dataclass
class Location:
    city: Final[str]

    def __init__(self, city: str):
        self.city = city

@final
class TemperatureUnit(Enum):
    CELSIUS = 0
    FAHRENHEIT = 1

@final
@dataclass
class Temperature:
    unit: TemperatureUnit
    value: int

@final
@dataclass
class WeatherOverview:
    location: Final[Location]
    max_temperature: Final[Temperature]
    min_temperature: Final[Temperature]
    max_apparent_temperature: Final[Temperature]
    min_apparent_temperature: Final[Temperature]

class WeatherForecastRetriever(ABC):
    @abstractmethod
    async def retrieve_overview(self, location: Location) -> [WeatherOverview]:
        pass

@final
class WttrInWeatherForecastRetriever(WeatherForecastRetriever):
    @lru_cache
    async def retrieve(self, location: Location) -> [WeatherOverview]:
        request_url = self._request_url(location)

        async with requests.Session() as session:
            response = await session.get(request_url)
            response.raise_for_status()
            response.json()

    def _request_url(self, location: Location) -> str:
        return f"https://wttr.in/{location.city}?format=j2"


class WeatherForecastPresenter(ABC):
    @abstractmethod
    def present_weather_overview(self) -> str:
        pass

@final
class WttrInWeatherForecastPresenter(WeatherForecastPresenter):
    def present_weather_overview(self) -> str:
        pass


retriever: Final[WeatherForecastRetriever] = WttrInWeatherForecastRetriever()
presenter: Final[WeatherForecastPresenter] = WttrInWeatherForecastPresenter()

@final
class WeatherForcastController:
    # @tool
    async def check_weather(self,
        city: Annotated[str, '需查询的城市名称'],
    ) -> str:
        city = city.strip()
        if not city:
            return "错误：城市名称不能为空"
        if len(city) > 50:
            return "错误：城市名称过长"

        try:
            return await retriever.retrieve(Location(city))
        except requests.exceptions.Timeout:
            return f"错误：请求超时"
        except requests.exceptions.ConnectionError:
            return f"错误：网络连接异常"
        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 404:
                return f"错误：未找到城市'{city}'"
            else:
                return f"错误：HTTP请求失败 {e.response.status_code}"
        except Exception as e:
            return f"错误：未知 {str(e)}"
